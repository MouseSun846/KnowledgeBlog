import{_ as s,c as i,o as a,a as e}from"./app-DzdQhDvJ.js";const n="/KnowledgeBlog/assets/images/k8s%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.png",l="/KnowledgeBlog/assets/images/693e0a87-d9f1-4fe5-a733-79e618b922d2.png",t={},h=e(`<div class="hint-container tip"><p class="hint-container-title">k8s 笔记总结</p></div><h1 id="pv" tabindex="-1"><a class="header-anchor" href="#pv"><span>pv</span></a></h1><h2 id="访问模式-access-modes" tabindex="-1"><a class="header-anchor" href="#访问模式-access-modes"><span>访问模式（Access Modes）</span></a></h2><p>Kubernetes支持的访问模式如下。</p><ul><li><p>ReadWriteOnce（RWO）：读写权限，并且只能被单个Node挂 载。</p></li><li><p>ReadOnlyMany（ROX）：只读权限，允许被多个Node挂载。</p></li><li><p>ReadWriteMany（RWX）：读写权限，允许被多个Node挂载。</p></li></ul><p>某些PV可能支持多种访问模式，但PV在挂载时只能使用一种访问模式，多种访问模式不能同时生效。</p><h2 id="回收策略-reclaim-policy" tabindex="-1"><a class="header-anchor" href="#回收策略-reclaim-policy"><span>回收策略（Reclaim Policy）</span></a></h2><p>Kubernetes支持的回收策略如下。</p><ul><li>Retain：保留数据，需要手工处理。</li><li>Recycle：简单清除文件的操作。</li><li>Delete：与PV相连的后端存储完成Volume的删除操作。</li></ul><p>目前只有NFS和HostPath两种类型的PV支持Recycle策略； AWSElasticBlockStore、GCEPersistentDisk、AzureDisk和Cinder类型的PV支持Delete策略。</p><h2 id="pv-status" tabindex="-1"><a class="header-anchor" href="#pv-status"><span>PV (STATUS)</span></a></h2><p>在 Kubernetes 中，PersistentVolume (PV) 是一个集群级别的资源，用于表示集群中持久化存储的详细信息和状态。PV 的状态由其 <code>STATUS</code> 字段来表示，它反映了存储卷的当前状态。了解这些状态有助于掌握 PV 在生命周期中的位置，以及它是否能够被持久卷声明 (PersistentVolumeClaim, PVC) 使用。</p><p>以下是 Kubernetes 中 PV 的几种可能的状态：</p><h3 id="_1-available" tabindex="-1"><a class="header-anchor" href="#_1-available"><span>1. <code>Available</code></span></a></h3><ul><li><strong>描述</strong>: 该状态表示 PV 可以被绑定到 PVC。PV 处于 <code>Available</code> 状态时，它未被任何 PVC 使用，可以供新的 PVC 绑定。</li><li><strong>特点</strong>: <ul><li>PV 还未与任何 PVC 绑定。</li><li>准备好用于新的 PVC 绑定。</li></ul></li></ul><h3 id="_2-bound" tabindex="-1"><a class="header-anchor" href="#_2-bound"><span>2. <code>Bound</code></span></a></h3><ul><li><strong>描述</strong>: 该状态表示 PV 已经被绑定到一个 PVC，且正被 PVC 使用。</li><li><strong>特点</strong>: <ul><li>PV 已经与一个 PVC 绑定。</li><li>它不能再被其他 PVC 绑定，直到被释放。</li></ul></li></ul><h3 id="_3-released" tabindex="-1"><a class="header-anchor" href="#_3-released"><span>3. <code>Released</code></span></a></h3><ul><li><strong>描述</strong>: 该状态表示 PV 之前已经绑定的 PVC 已经被删除，但是 PV 本身还没有被集群中的任何新 PVC 再次使用。</li><li><strong>特点</strong>: <ul><li>PVC 已被删除。</li><li>数据可能仍然存在于 PV 上，但它还未被新的 PVC 重新绑定。</li></ul></li></ul><h3 id="_4-failed" tabindex="-1"><a class="header-anchor" href="#_4-failed"><span>4. <code>Failed</code></span></a></h3><ul><li><strong>描述</strong>: 该状态表示 PV 由于某种原因无法使用，通常是因为与 PV 相关的存储设备出现了错误或问题。</li><li><strong>特点</strong>: <ul><li>PV 在操作过程中遇到错误，无法正常使用。</li><li>可能需要管理员干预以修复问题。</li></ul></li></ul><h2 id="状态转换" tabindex="-1"><a class="header-anchor" href="#状态转换"><span>状态转换</span></a></h2><p>PV 的状态转换通常遵循以下过程：</p><ol><li><strong>初始状态</strong>: PV 被创建后，处于 <code>Available</code> 状态。</li><li><strong>绑定</strong>: 一个 PVC 请求匹配 PV，PV 被绑定到 PVC 后，状态变为 <code>Bound</code>。</li><li><strong>释放</strong>: PVC 被删除后，PV 状态变为 <code>Released</code>。</li><li><strong>再利用或删除</strong>: <ul><li>如果允许再利用，管理员可以手动将 PV 状态重置为 <code>Available</code>，使其可以绑定到新的 PVC。</li><li>如果 PV 被认为不再需要，可能会被删除。</li></ul></li></ol><h3 id="状态图示" tabindex="-1"><a class="header-anchor" href="#状态图示"><span>状态图示</span></a></h3><p>以下是状态转换的示意图：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Available</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |  PVC 绑定</span></span>
<span class="line"><span>    V</span></span>
<span class="line"><span>Bound</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |  PVC 删除</span></span>
<span class="line"><span>    V</span></span>
<span class="line"><span>Released</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |  删除或再利用</span></span>
<span class="line"><span>    V</span></span>
<span class="line"><span>Failed (或) Available</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="resourcequotas与limitranges" tabindex="-1"><a class="header-anchor" href="#resourcequotas与limitranges"><span>Resourcequotas与Limitranges</span></a></h1><p>在 Kubernetes（K8s）集群中，<strong>ResourceQuotas</strong> 和 <strong>LimitRanges</strong> 是两种用于资源管理和控制的机制。它们帮助管理员确保资源的公平分配和高效利用。以下是对这两者的详细介绍：</p><h2 id="resourcequotas" tabindex="-1"><a class="header-anchor" href="#resourcequotas"><span>ResourceQuotas</span></a></h2><p><strong>ResourceQuotas</strong> 是一种在 Kubernetes 中用来限制命名空间（Namespace）内资源总量的机制。它们用于防止某个命名空间消耗过多的集群资源，从而影响其他命名空间的正常运行。</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><ul><li><strong>限制命名空间资源使用</strong>: ResourceQuotas 确保每个命名空间不会消耗超过指定的资源限额。</li><li><strong>控制资源分配</strong>: 它们帮助管理员公平分配集群资源，防止资源耗尽。</li><li><strong>提升资源管理能力</strong>: 通过设置资源限额，管理员可以更好地管理和监控资源使用情况。</li></ul><h3 id="配置示例" tabindex="-1"><a class="header-anchor" href="#配置示例"><span>配置示例</span></a></h3><p>以下是一个 ResourceQuota 的 YAML 配置示例，它限制了某个命名空间内的 CPU 和内存总量，以及对象数量（如 Pod 和 Service）：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ResourceQuota</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-quota</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  hard</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    pods</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;10&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                  # 限制 Pod 的总数量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;5&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">               # 限制 Service 的总数量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    requests.cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;4&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">           # 限制 CPU 请求总量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    requests.memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;8Gi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # 限制内存请求总量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    limits.cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;10&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            # 限制 CPU 使用总量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    limits.memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;16Gi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">       # 限制内存使用总量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主要字段" tabindex="-1"><a class="header-anchor" href="#主要字段"><span>主要字段</span></a></h3><ul><li><strong>hard</strong>: 定义了资源的硬性限制，包括 CPU、内存、存储和对象数量等。</li><li><strong>scopes</strong>: 可选字段，指定了 ResourceQuota 适用的对象范围（如仅应用于某些特定的资源类型）。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li><strong>开发环境</strong>: 限制资源以确保测试环境不会占用过多的生产资源。</li><li><strong>多租户环境</strong>: 在共享集群中，控制不同租户（命名空间）之间的资源使用。</li><li><strong>成本管理</strong>: 控制资源使用来管理和控制成本。</li></ul><h2 id="limitranges" tabindex="-1"><a class="header-anchor" href="#limitranges"><span>LimitRanges</span></a></h2><p><strong>LimitRanges</strong> 是一种在 Kubernetes 中用于限制命名空间内单个 Pod 或容器资源使用的机制。与 ResourceQuotas 的整体限制不同，LimitRanges 主要控制单个 Pod 或容器的资源使用范围。</p><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1"><span>作用</span></a></h3><ul><li><strong>设置默认资源限制</strong>: 如果 Pod 或容器没有指定资源请求和限制，LimitRanges 可以提供默认值。</li><li><strong>防止资源过度消耗</strong>: 通过限制单个容器或 Pod 的资源使用，防止过多的资源消耗影响整个集群的性能。</li><li><strong>鼓励合理的资源分配</strong>: 鼓励开发人员在部署 Pod 时合理设置资源请求和限制。</li></ul><h3 id="配置示例-1" tabindex="-1"><a class="header-anchor" href="#配置示例-1"><span>配置示例</span></a></h3><p>以下是一个 LimitRange 的 YAML 配置示例，它为容器设置了 CPU 和内存的默认值和最大/最小值：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">LimitRange</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-limits</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  limits</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">             # 容器的最大 CPU 使用量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1Gi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 容器的最大内存使用量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    min</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;100m&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          # 容器的最小 CPU 使用量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;128Mi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # 容器的最小内存使用量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;500m&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          # 容器的默认 CPU 请求量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;512Mi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # 容器的默认内存请求量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    defaultRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;250m&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          # 容器的默认 CPU 请求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;256Mi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # 容器的默认内存请求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Container</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 应用类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主要字段-1" tabindex="-1"><a class="header-anchor" href="#主要字段-1"><span>主要字段</span></a></h3><ul><li><strong>max</strong>: 定义了单个容器可以请求的最大资源量。</li><li><strong>min</strong>: 定义了单个容器必须请求的最小资源量。</li><li><strong>default</strong>: 定义了容器没有指定资源请求和限制时的默认值。</li><li><strong>defaultRequest</strong>: 定义了容器没有指定资源请求时的默认请求值。</li><li><strong>type</strong>: 指定了限制适用于 Pod 还是容器。</li></ul><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h3><ul><li><strong>应用程序标准化</strong>: 在命名空间内强制执行资源使用标准，确保所有容器符合预期的资源使用模式。</li><li><strong>资源优化</strong>: 防止资源过度配置或资源不足，从而优化集群性能和资源利用率。</li><li><strong>开发与测试环境</strong>: 在不同环境中设置不同的限制，确保资源的合理分配和使用。</li></ul><h2 id="比较与总结" tabindex="-1"><a class="header-anchor" href="#比较与总结"><span>比较与总结</span></a></h2><ul><li><p><strong>ResourceQuotas</strong>:</p><ul><li><strong>范围</strong>: 适用于整个命名空间的资源总量。</li><li><strong>目的</strong>: 控制命名空间内的资源使用上限，确保集群资源的公平分配和高效利用。</li><li><strong>典型场景</strong>: 多租户环境、开发环境中的资源限制。</li></ul></li><li><p><strong>LimitRanges</strong>:</p><ul><li><strong>范围</strong>: 适用于单个 Pod 或容器的资源使用。</li><li><strong>目的</strong>: 设置资源使用的默认值和最大/最小限制，防止个体资源过度消耗。</li><li><strong>典型场景</strong>: 应用程序的资源标准化和资源优化。</li></ul></li></ul><p>两者结合使用，可以在 Kubernetes 集群中提供强大的资源管理能力，确保资源的公平分配和高效使用。</p><h2 id="k8s技能图谱" tabindex="-1"><a class="header-anchor" href="#k8s技能图谱"><span>k8s技能图谱</span></a></h2><figure><img src="`+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="静态pod" tabindex="-1"><a class="header-anchor" href="#静态pod"><span>静态pod</span></a></h2><p><code>Static Pod</code> 是 Kubernetes 中的一种特殊类型的 Pod，它由 kubelet 直接管理，而不是通过 Kubernetes API Server 来创建和管理。Static Pod 通常用于集群管理工具（如 Kubernetes 本身）的部署和管理，尤其是在 Kubernetes 控制平面组件（如 etcd、kube-apiserver、kube-controller-manager 和 kube-scheduler）自身的管理中。</p><h3 id="static-pod-的特点" tabindex="-1"><a class="header-anchor" href="#static-pod-的特点"><span>Static Pod 的特点</span></a></h3><ol><li><p><strong>由 kubelet 管理</strong>：</p><ul><li>Static Pod 由运行在节点上的 kubelet 直接管理，不需要 API Server 的参与。</li><li>kubelet 会定期扫描特定的目录（通常是 <code>/etc/kubernetes/manifests</code>）中的 Pod 定义文件，并根据这些文件创建和管理 Pod。</li></ul></li><li><p><strong>没有 ReplicaSet 或 Deployment</strong>：</p><ul><li>Static Pod 不是通过 Deployment、ReplicaSet 或其他控制器管理的，因此它们没有自动伸缩、滚动更新等高级特性。</li></ul></li><li><p><strong>静态配置</strong>：</p><ul><li>Static Pod 的配置是静态文件，通常是 JSON 或 YAML 格式，存放在节点的文件系统中。</li><li>这些配置文件不会因为 API Server 或 etcd 的故障而丢失，因此非常适合用于管理集群的核心组件。</li></ul></li><li><p><strong>自动重启</strong>：</p><ul><li>如果 Static Pod 崩溃或被删除，kubelet 会根据配置文件自动重新创建它们，保证这些关键组件的高可用性。</li></ul></li></ol><h3 id="创建-static-pod" tabindex="-1"><a class="header-anchor" href="#创建-static-pod"><span>创建 Static Pod</span></a></h3><p>要创建一个 Static Pod，你需要在节点的特定目录中（通常是 <code>/etc/kubernetes/manifests</code>）创建一个包含 Pod 定义的 YAML 文件。以下是一个示例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 文件路径：/etc/kubernetes/manifests/static-pod-example.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">static-pod-example</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">kube-system</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nginx:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上述 YAML 文件保存到节点的 <code>/etc/kubernetes/manifests</code> 目录中后，kubelet 会自动检测到该文件并创建对应的 Pod。</p><h3 id="使用场景-2" tabindex="-1"><a class="header-anchor" href="#使用场景-2"><span>使用场景</span></a></h3><p>Static Pod 通常用于以下场景：</p><ol><li><p><strong>Kubernetes 控制平面组件</strong>：</p><ul><li>部署和管理 Kubernetes 控制平面组件（如 etcd、kube-apiserver、kube-controller-manager 和 kube-scheduler），这些组件必须在集群启动时运行，不能依赖于 Kubernetes 自身来管理。</li></ul></li><li><p><strong>集群启动和恢复</strong>：</p><ul><li>在集群启动或恢复过程中，使用 Static Pod 确保关键组件能够独立于 Kubernetes API Server 和 etcd 正常启动。</li></ul></li><li><p><strong>简化的节点管理</strong>：</p><ul><li>在一些简化的集群管理方案中，可能会使用 Static Pod 来运行节点级别的服务或代理，而不依赖于 Kubernetes 控制器。</li></ul></li></ol><h3 id="监控和管理" tabindex="-1"><a class="header-anchor" href="#监控和管理"><span>监控和管理</span></a></h3><p>由于 Static Pod 由 kubelet 直接管理，因此它们的一些管理和监控操作与普通 Pod 略有不同：</p><ul><li><strong>日志查看</strong>：你仍然可以使用 <code>kubectl logs</code> 命令查看 Static Pod 的日志。</li><li><strong>状态检查</strong>：可以使用 <code>kubectl get pod -n kube-system</code> 命令查看 Static Pod 的状态。</li><li><strong>更新 Pod</strong>：要更新 Static Pod，需要手动编辑对应的 YAML 文件，kubelet 会自动检测到文件的变化并重新创建 Pod。</li></ul><p>Static Pod 是 Kubernetes 提供的一种灵活机制，用于确保关键组件的高可用性和独立性，是集群稳定运行的关键保障之一。</p><h2 id="taint" tabindex="-1"><a class="header-anchor" href="#taint"><span>Taint</span></a></h2><p>Taint 是 Kubernetes 中的一种机制，用于限制 Pod 在节点上运行的条件。Taint 可以应用于节点，并指定一个键值对，用于限制 Pod 在节点上运行的条件。</p><h3 id="taint-机制" tabindex="-1"><a class="header-anchor" href="#taint-机制"><span>Taint 机制</span></a></h3><p>Taint 是应用在节点上的属性，表示这个节点对某些 Pod 来说是不合适的。每个 Taint 由三个部分组成：</p><ul><li><strong>键（Key）</strong>：标识 Taint 的名称。</li><li><strong>值（Value）</strong>：标识 Taint 的具体值。</li><li><strong>效果（Effect）</strong>：标识 Taint 的作用方式。常见的效果有三种： <ul><li><code>NoSchedule</code>：新的 Pod 不会被调度到这个节点上。</li><li><code>PreferNoSchedule</code>：尽量避免将新的 Pod 调度到这个节点上，但如果没有其他合适的节点，也可能会调度。</li><li><code>NoExecute</code>：已经运行在这个节点上的 Pod 会被驱逐，新 Pod 也不会被调度到这个节点上。</li></ul></li></ul><ul><li><p>节点设置taint</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>kubectl taint no minikube level=high:NoSchedule</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>移除 Taint</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> taint</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> minikube</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> level=high:NoSchedule-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Pod设置toleration</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>apiVersion: apps/v1</span></span>
<span class="line"><span>kind: Deployment</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: nginx</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  replicas: 1</span></span>
<span class="line"><span>  selector: </span></span>
<span class="line"><span>    matchLabels: </span></span>
<span class="line"><span>      app: nginx</span></span>
<span class="line"><span>  template:</span></span>
<span class="line"><span>    metadata:</span></span>
<span class="line"><span>      labels:</span></span>
<span class="line"><span>        app: nginx</span></span>
<span class="line"><span>    spec:</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - name: nginx</span></span>
<span class="line"><span>          command: [&quot;python3&quot;]</span></span>
<span class="line"><span>          args: [&quot;-m&quot;, &quot;http.server&quot;, &quot;9999&quot;]        </span></span>
<span class="line"><span>          image: &quot;registry.cnbita.com:5000/wangshi/python:3.10&quot;</span></span>
<span class="line"><span>          imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span>          ports:</span></span>
<span class="line"><span>            - name: http</span></span>
<span class="line"><span>              containerPort: 80</span></span>
<span class="line"><span>              protocol: TCP</span></span>
<span class="line"><span>          resources:</span></span>
<span class="line"><span>            requests:</span></span>
<span class="line"><span>              cpu: 100m</span></span>
<span class="line"><span>              memory: 128Mi</span></span>
<span class="line"><span>            limits: </span></span>
<span class="line"><span>              cpu: 500m</span></span>
<span class="line"><span>              memory: 256Mi</span></span>
<span class="line"><span>      tolerations: </span></span>
<span class="line"><span>        - key: &quot;level&quot;</span></span>
<span class="line"><span>          operator: &quot;Equal&quot;</span></span>
<span class="line"><span>          value: &quot;high&quot;</span></span>
<span class="line"><span>          effect: &quot;NoSchedule&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>上述配置说明pod能够容忍节点设置taint的level=high:NoSchedule，如果pod不设置亲和性tolerations，则无法进行部署。如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span></span>
<span class="line"><span>                            node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span></span>
<span class="line"><span>Events:</span></span>
<span class="line"><span>  Type     Reason            Age    From               Message</span></span>
<span class="line"><span>  ----     ------            ----   ----               -------</span></span>
<span class="line"><span>  Warning  FailedScheduling  3m57s  default-scheduler  0/1 nodes are available: 1 node(s) had untolerated taint {level: high}. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Kubernetes 中，<code>taint</code> 是用于节点管理的机制，通过标记节点来影响 Pod 的调度。Taints 可以防止某些 Pod 调度到特定节点上，除非这些 Pod 具有相应的 <code>toleration</code>。这种机制有助于确保工作负载在集群中得到更好地分布和隔离。</p><h2 id="无头服务-headless-services" tabindex="-1"><a class="header-anchor" href="#无头服务-headless-services"><span>无头服务（Headless Services）</span></a></h2><p>在 Kubernetes 中，Headless Service 是一种特殊类型的 Service，不会分配集群 IP（ClusterIP）。这种服务类型主要用于暴露 StatefulSet 的每个 Pod，并且允许直接访问每个 Pod。下面是对 Kubernetes Headless Service 的详细介绍：</p><h3 id="headless-service-的特点" tabindex="-1"><a class="header-anchor" href="#headless-service-的特点"><span>Headless Service 的特点</span></a></h3><ol><li><p><strong>没有 Cluster IP</strong>：</p><ul><li>与普通的 Kubernetes Service 不同，Headless Service 不会为服务分配一个 Cluster IP。它通过将 <code>ClusterIP</code> 字段设置为 <code>None</code> 来实现这一点。</li></ul></li><li><p><strong>直接访问 Pod</strong>：</p><ul><li>Headless Service 允许客户端直接访问服务后端的每个 Pod，而不是通过负载均衡器来访问。这对于需要直接与特定 Pod 进行通信的场景非常有用，例如 StatefulSet 中的数据库分片或有状态应用。</li></ul></li><li><p><strong>DNS 解析</strong>：</p><ul><li>Headless Service 会为每个 Pod 创建一个 DNS 记录，这样客户端可以通过 DNS 名称直接访问特定的 Pod。对于 StatefulSet，每个 Pod 都有一个稳定的 DNS 名称。</li></ul></li></ol><h3 id="使用场景-3" tabindex="-1"><a class="header-anchor" href="#使用场景-3"><span>使用场景</span></a></h3><p>Headless Service 主要用于以下几种场景：</p><ol><li><p><strong>StatefulSet</strong>：</p><ul><li>StatefulSet 通常用于部署有状态应用，例如数据库集群或分布式文件系统。Headless Service 允许这些有状态应用中的各个 Pod 直接相互访问。</li></ul></li><li><p><strong>自定义服务发现</strong>：</p><ul><li>在某些情况下，应用需要自定义的服务发现机制，而不是 Kubernetes 提供的负载均衡。Headless Service 允许应用自行管理和发现服务实例。</li></ul></li></ol><h3 id="headless-service-的定义示例" tabindex="-1"><a class="header-anchor" href="#headless-service-的定义示例"><span>Headless Service 的定义示例</span></a></h3><p>以下是一个 Headless Service 的 YAML 定义示例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">headless-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  clusterIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">http</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    targetPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例定义了一个名为 <code>headless-service</code> 的服务，没有 <code>ClusterIP</code>。它选择了带有标签 <code>app: my-app</code> 的 Pod，并将流量从服务的 80 端口转发到 Pod 的 8080 端口。</p><h3 id="statefulset-与-headless-service-的结合" tabindex="-1"><a class="header-anchor" href="#statefulset-与-headless-service-的结合"><span>StatefulSet 与 Headless Service 的结合</span></a></h3><p>以下是一个使用 Headless Service 的 StatefulSet 示例：</p><h4 id="定义-headless-service" tabindex="-1"><a class="header-anchor" href="#定义-headless-service"><span>定义 Headless Service</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-stateful-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  clusterIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-stateful-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">http</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    targetPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义-statefulset" tabindex="-1"><a class="header-anchor" href="#定义-statefulset"><span>定义 StatefulSet</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">StatefulSet</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-stateful-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  serviceName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my-stateful-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-stateful-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-stateful-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-image</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>my-stateful-service</code> 是一个 Headless Service，它与 <code>my-stateful-app</code> StatefulSet 结合使用。每个 StatefulSet Pod 都有一个稳定的 DNS 名称，例如 <code>my-stateful-app-0.my-stateful-service.default.svc.cluster.local</code>。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Headless Service 是 Kubernetes 中的一种特殊服务类型，适用于需要直接访问每个 Pod 的场景。它通过不分配 Cluster IP 来实现这一点，并为每个 Pod 提供稳定的 DNS 记录。Headless Service 通常用于有状态应用和自定义服务发现场景，尤其是在 StatefulSet 中。</p><h2 id="kubelet的hairpin-mode" tabindex="-1"><a class="header-anchor" href="#kubelet的hairpin-mode"><span>Kubelet的<code>hairpin-mode</code></span></a></h2><p>Kubelet 的 <code>hairpin-mode</code> 是一个配置选项，它决定了 Pod 内的容器是否能够通过 Pod 的 IP 访问自身以及同一 Pod 中的其他容器的服务。这种访问模式被称为“发夹模式（Hairpin Mode）”。具体来说，<code>hairpin-mode</code> 的作用是在容器网络接口上设置发夹规则，使得流量可以从容器发出后，又从同一个网络接口回到容器内部。</p><h3 id="hairpin-mode-的工作原理" tabindex="-1"><a class="header-anchor" href="#hairpin-mode-的工作原理"><span>Hairpin Mode 的工作原理</span></a></h3><p>在发夹模式下，容器内的应用可以通过服务 IP 或者 Pod IP 访问同一 Pod 内的其他容器。这种模式主要用于以下情况：</p><ul><li><strong>自访问</strong>：容器需要通过 Pod IP 访问自己，例如某些服务需要通过自身的外部 IP 进行健康检查。</li><li><strong>内部通信</strong>：同一个 Pod 内的多个容器之间的通信，通过 Pod 的网络接口实现内循环。</li></ul><h3 id="配置-hairpin-mode" tabindex="-1"><a class="header-anchor" href="#配置-hairpin-mode"><span>配置 <code>hairpin-mode</code></span></a></h3><p>Kubelet 提供了几个选项来配置 <code>hairpin-mode</code>：</p><ol><li><strong><code>hairpin-veth</code></strong>：启用发夹模式，这是默认模式。Kubelet 会在创建容器网络接口时启用发夹规则。</li><li><strong><code>promiscuous-bridge</code></strong>：使用混杂模式的网桥。这种模式在性能上可能有一些开销，但在某些网络插件或环境下可能是必要的。</li><li><strong><code>none</code></strong>：禁用发夹模式。这种模式下，容器无法通过 Pod IP 访问自身或同一 Pod 内的其他容器。</li></ol><h3 id="配置示例-2" tabindex="-1"><a class="header-anchor" href="#配置示例-2"><span>配置示例</span></a></h3><p>要配置 <code>hairpin-mode</code>，可以在 Kubelet 的启动参数中设置。例如，在 kubelet 配置文件中：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">KubeletConfiguration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">hairpinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">hairpin-veth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在启动 Kubelet 时通过命令行参数：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">kubelet</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --hairpin-mode=hairpin-veth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用场景-4" tabindex="-1"><a class="header-anchor" href="#使用场景-4"><span>使用场景</span></a></h3><ul><li><strong>服务自身健康检查</strong>：某些服务需要通过 Pod IP 对自身进行健康检查。</li><li><strong>同一 Pod 内的容器通信</strong>：Pod 内部的不同容器通过 Pod IP 进行通信，简化网络配置。</li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p><code>hairpin-mode</code> 是 Kubelet 的一个重要配置选项，用于控制容器是否能够通过 Pod IP 进行自访问和内部通信。根据具体的应用场景和需求，可以选择适当的发夹模式配置。常见的选择是默认的 <code>hairpin-veth</code> 模式，它能够在大多数场景下提供良好的性能和功能支持。</p><h2 id="资源短缺" tabindex="-1"><a class="header-anchor" href="#资源短缺"><span>资源短缺</span></a></h2><p>QoS 划分的主要应用场景，是当宿主机资源紧张的时候，kubelet 对 Pod 进行 Eviction（即资源回收）时需要用到的。</p><p>具体地说，当 Kubernetes 所管理的宿主机上不可压缩资源短缺时，就有可能触发 Eviction。比如，可用内存（memory.available）、可用的宿主机磁盘空间（nodefs.available），以及容器运行时镜像存储空间（imagefs.available）等等。</p><p>目前，Kubernetes 为你设置的 Eviction 的默认阈值如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>memory.available&lt;100Mi</span></span>
<span class="line"><span>nodefs.available&lt;10%</span></span>
<span class="line"><span>nodefs.inodesFree&lt;5%</span></span>
<span class="line"><span>imagefs.available&lt;15%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述各个触发条件在 kubelet 里都是可配置的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>kubelet --eviction-hard=imagefs.available&lt;10%,memory.available&lt;500Mi,nodefs.available&lt;5%,nodefs.inodesFree&lt;5% --eviction-soft=imagefs.available&lt;30%,nodefs.available&lt;10% --eviction-soft-grace-period=imagefs.available=2m,nodefs.available=2m --eviction-max-pod-grace-period=600</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Eviction 在 Kubernetes 里其实分为 Soft 和 Hard 两种模式。</p><p>其中，Soft Eviction 允许你为 Eviction 过程设置一段“优雅时间”，比如上面例子里的 imagefs.available=2m，就意味着当 imagefs 不足的阈值达到 2 分钟之后，kubelet 才会开始 Eviction 的过程。</p><p>而 Hard Eviction 模式下，Eviction 过程就会在阈值达到之后立刻开始。</p><blockquote><p>Kubernetes 计算 Eviction 阈值的数据来源，主要依赖于从 Cgroups 读取到的值，以及使用 cAdvisor 监控到的数据。</p></blockquote><p>Pod 的 QoS 类别： Guaranteed &gt; Burstable &gt; BestEffort</p><p>Kubernetes 会保证只有当 Guaranteed 类别的 Pod 的资源使用量超过了其 limits 的限制，或者宿主机本身正处于 Memory Pressure 状态时，Guaranteed 的 Pod 才可能被选中进行 Eviction 操作。</p><h2 id="如何能够让-kubernetes-的调度器尽可能地将-pod-分布在不同机器上-避免-堆叠-呢" tabindex="-1"><a class="header-anchor" href="#如何能够让-kubernetes-的调度器尽可能地将-pod-分布在不同机器上-避免-堆叠-呢"><span>如何能够让 Kubernetes 的调度器尽可能地将 Pod 分布在不同机器上，避免“堆叠”呢?</span></a></h2><p>在 Kubernetes 中，可以通过以下几种方式配置调度策略，以尽可能地将 Pod 分布在不同的节点上，避免“堆叠”：</p><h3 id="_1-pod-反亲和性-pod-anti-affinity" tabindex="-1"><a class="header-anchor" href="#_1-pod-反亲和性-pod-anti-affinity"><span>1. Pod 反亲和性（Pod Anti-Affinity）</span></a></h3><p>Pod 反亲和性是一种调度约束，允许用户指定某些 Pod 不应该与其他特定 Pod 运行在同一个节点上。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  affinity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    podAntiAffinity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      requiredDuringSchedulingIgnoredDuringExecution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">labelSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">            matchExpressions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">              - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">                operator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">In</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">                values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">          topologyKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;kubernetes.io/hostname&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>podAntiAffinity</code> 指定了具有相同标签 <code>app=myapp</code> 的 Pod 不应该被调度到相同的节点上。<code>topologyKey</code> 为 <code>kubernetes.io/hostname</code>，表示约束作用在节点级别。</p><h3 id="_2-节点亲和性-node-affinity" tabindex="-1"><a class="header-anchor" href="#_2-节点亲和性-node-affinity"><span>2. 节点亲和性（Node Affinity）</span></a></h3><p>Node Affinity 允许调度器根据节点标签选择合适的节点。这可以用于避免将所有 Pod 调度到相同的节点。</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  affinity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    nodeAffinity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      requiredDuringSchedulingIgnoredDuringExecution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        nodeSelectorTerms</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">matchExpressions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">disktype</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">            operator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">In</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">            values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ssd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例展示了如何使用节点标签（<code>disktype=ssd</code>）进行调度，以确保 Pod 被调度到带有特定标签的节点上。</p><h3 id="_3-分布式调度策略-spread-constraints" tabindex="-1"><a class="header-anchor" href="#_3-分布式调度策略-spread-constraints"><span>3. 分布式调度策略（Spread Constraints）</span></a></h3><p>Kubernetes 1.18 引入了 <code>TopologySpreadConstraints</code>，允许用户定义分布式调度策略，确保 Pod 均匀地分布在集群的不同节点上。</p><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">example-pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  topologySpreadConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">maxSkew</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    topologyKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">kubernetes.io/hostname</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    whenUnsatisfiable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">DoNotSchedule</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    labelSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-image</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>topologySpreadConstraints</code> 指定 Pod 应该均匀地分布在不同的节点上。<code>maxSkew</code> 表示同一节点上的 Pod 数量与其他节点上的最大偏差不超过1。</p><h3 id="_4-自定义调度器策略-custom-scheduler-policies" tabindex="-1"><a class="header-anchor" href="#_4-自定义调度器策略-custom-scheduler-policies"><span>4. 自定义调度器策略（Custom Scheduler Policies）</span></a></h3><p>Kubernetes 允许使用自定义调度策略文件来自定义调度行为。例如，可以设置 <code>EvenPodsSpreadPriority</code> 来实现均匀调度。</p><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例</span></a></h4><p>自定义调度策略文件（<code>scheduler-policy-config.json</code>）：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;kind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Policy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;apiVersion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;priorities&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;EvenPodsSpreadPriority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">      &quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动调度器时使用该策略文件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">kube-scheduler</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --policy-config-file=scheduler-policy-config.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过配置这些策略，可以显著改善 Pod 在集群中的分布情况，避免“堆叠”问题，实现资源的更高效利用。</p><h2 id="kubelet如何实现-exec、logs-等接口" tabindex="-1"><a class="header-anchor" href="#kubelet如何实现-exec、logs-等接口"><span>kubelet如何实现 exec、logs 等接口</span></a></h2><p>gRPC 接口调用期间，kubelet 需要跟容器项目维护一个长连接来传输数据。这种 API，我们就称之为 Streaming API。</p><p>CRI shim 里对 Streaming API 的实现，依赖于一套独立的 Streaming Server 机制。</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，当我们对一个容器执行 kubectl exec 命令的时候，这个请求首先交给 API Server，然后 API Server 就会调用 kubelet 的 Exec API。</p><p>这时，kubelet 就会调用 CRI 的 Exec 接口，而负责响应这个接口的，自然就是具体的 CRI shim。</p><p>但在这一步，CRI shim 并不会直接去调用后端的容器项目（比如 Docker ）来进行处理，而只会返回一个 URL 给 kubelet。这个 URL，就是该 CRI shim 对应的 Streaming Server 的地址和端口。</p><p>而 kubelet 在拿到这个 URL 之后，就会把它以 Redirect 的方式返回给 API Server。所以这时候，API Server 就会通过重定向来向 Streaming Server 发起真正的 /exec 请求，与它建立长连接</p><p>当然，这个 Streaming Server 本身，是需要通过使用 SIG-Node 为你维护的 Streaming API 库来实现的。并且，Streaming Server 会在 CRI shim 启动时就一起启动。此外，Stream Server 这一部分具体怎么实现，完全可以由 CRI shim 的维护者自行决定。比如，对于 Docker 项目来说，dockershim 就是直接调用 Docker 的 Exec API 来作为实现的。</p><h2 id="集群安装" tabindex="-1"><a class="header-anchor" href="#集群安装"><span>集群安装</span></a></h2><p>kubeadm init --cri-socket unix:///var/run/cri-dockerd.sock</p><p>kubeadm reset --cri-socket unix:///var/run/cri-dockerd.sock</p><p>解决</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>l 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: I0729 15:07:31.604995 3437386 server.go:469] &quot;Golang settings&quot; GOGC=&quot;&quot; GOMAXPROCS=&quot;&quot; GOTRACEBACK=&quot;&quot;</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: I0729 15:07:31.605172 3437386 server.go:895] &quot;Client rotation is on, will bootstrap in background&quot;</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: I0729 15:07:31.607274 3437386 certificate_store.go:130] Loading cert/key pair from &quot;/var/lib/kubelet/pki/kubelet-client-current.pem&quot;.</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: I0729 15:07:31.608035 3437386 dynamic_cafile_content.go:157] &quot;Starting controller&quot; name=&quot;client-ca-bundle::/etc/kubernetes/pki/ca.crt&quot;</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: W0729 15:07:31.611818 3437386 sysinfo.go:203] Nodes topology is not available, providing CPU topology</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: I0729 15:07:31.619656 3437386 server.go:725] &quot;--cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /&quot;</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 kubelet[3437386]: E0729 15:07:31.619995 3437386 run.go:74] &quot;command failed&quot; err=&quot;failed to run Kubelet: running with swap on is not supported, please disable swap! or set --fail-swap-on flag to false. /proc/swaps contained: [Filename\\t\\t\\t\\tType\\t\\tSize\\t\\tUsed\\t\\tPriority /dev/sdb                                partition\\t4194304\\t\\t8580\\t\\t-2]&quot;</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 systemd[1]: kubelet.service: Main process exited, code=exited, status=1/FAILURE</span></span>
<span class="line"><span>Jul 29 15:07:31 DESKTOP-P54EAF3 systemd[1]: kubelet.service: Failed with result &#39;exit-code&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,169),p=[h];function d(r,k){return a(),i("div",null,p)}const o=s(t,[["render",d],["__file","k8s.html.vue"]]),g=JSON.parse('{"path":"/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s.html","title":"k8s知识点","lang":"zh-CN","frontmatter":{"date":"2024-07-03T00:00:00.000Z","title":"k8s知识点","category":["k8s"],"tag":["笔记"],"description":"k8s 笔记总结 pv 访问模式（Access Modes） Kubernetes支持的访问模式如下。 ReadWriteOnce（RWO）：读写权限，并且只能被单个Node挂 载。 ReadOnlyMany（ROX）：只读权限，允许被多个Node挂载。 ReadWriteMany（RWX）：读写权限，允许被多个Node挂载。 某些PV可能支持多种访问...","head":[["meta",{"property":"og:url","content":"https://mousesun846.github.io/KnowledgeBlog/KnowledgeBlog/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s.html"}],["meta",{"property":"og:site_name","content":"知识笔记"}],["meta",{"property":"og:title","content":"k8s知识点"}],["meta",{"property":"og:description","content":"k8s 笔记总结 pv 访问模式（Access Modes） Kubernetes支持的访问模式如下。 ReadWriteOnce（RWO）：读写权限，并且只能被单个Node挂 载。 ReadOnlyMany（ROX）：只读权限，允许被多个Node挂载。 ReadWriteMany（RWX）：读写权限，允许被多个Node挂载。 某些PV可能支持多种访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mousesun846.github.io/KnowledgeBlog/KnowledgeBlog/assets/images/k8s技能图谱.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-13T01:23:17.000Z"}],["meta",{"property":"article:author","content":"MouseSun"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2024-07-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-13T01:23:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"k8s知识点\\",\\"image\\":[\\"https://mousesun846.github.io/KnowledgeBlog/KnowledgeBlog/assets/images/k8s技能图谱.png\\",\\"https://mousesun846.github.io/KnowledgeBlog/KnowledgeBlog/assets/images/693e0a87-d9f1-4fe5-a733-79e618b922d2.png\\"],\\"datePublished\\":\\"2024-07-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-13T01:23:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MouseSun\\",\\"url\\":\\"https://github.com/MouseSun846\\",\\"email\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"访问模式（Access Modes）","slug":"访问模式-access-modes","link":"#访问模式-access-modes","children":[]},{"level":2,"title":"回收策略（Reclaim Policy）","slug":"回收策略-reclaim-policy","link":"#回收策略-reclaim-policy","children":[]},{"level":2,"title":"PV (STATUS)","slug":"pv-status","link":"#pv-status","children":[{"level":3,"title":"1. Available","slug":"_1-available","link":"#_1-available","children":[]},{"level":3,"title":"2. Bound","slug":"_2-bound","link":"#_2-bound","children":[]},{"level":3,"title":"3. Released","slug":"_3-released","link":"#_3-released","children":[]},{"level":3,"title":"4. Failed","slug":"_4-failed","link":"#_4-failed","children":[]}]},{"level":2,"title":"状态转换","slug":"状态转换","link":"#状态转换","children":[{"level":3,"title":"状态图示","slug":"状态图示","link":"#状态图示","children":[]}]},{"level":2,"title":"ResourceQuotas","slug":"resourcequotas","link":"#resourcequotas","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"配置示例","slug":"配置示例","link":"#配置示例","children":[]},{"level":3,"title":"主要字段","slug":"主要字段","link":"#主要字段","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"LimitRanges","slug":"limitranges","link":"#limitranges","children":[{"level":3,"title":"作用","slug":"作用-1","link":"#作用-1","children":[]},{"level":3,"title":"配置示例","slug":"配置示例-1","link":"#配置示例-1","children":[]},{"level":3,"title":"主要字段","slug":"主要字段-1","link":"#主要字段-1","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]}]},{"level":2,"title":"比较与总结","slug":"比较与总结","link":"#比较与总结","children":[]},{"level":2,"title":"k8s技能图谱","slug":"k8s技能图谱","link":"#k8s技能图谱","children":[]},{"level":2,"title":"静态pod","slug":"静态pod","link":"#静态pod","children":[{"level":3,"title":"Static Pod 的特点","slug":"static-pod-的特点","link":"#static-pod-的特点","children":[]},{"level":3,"title":"创建 Static Pod","slug":"创建-static-pod","link":"#创建-static-pod","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-2","link":"#使用场景-2","children":[]},{"level":3,"title":"监控和管理","slug":"监控和管理","link":"#监控和管理","children":[]}]},{"level":2,"title":"Taint","slug":"taint","link":"#taint","children":[{"level":3,"title":"Taint 机制","slug":"taint-机制","link":"#taint-机制","children":[]}]},{"level":2,"title":"无头服务（Headless Services）","slug":"无头服务-headless-services","link":"#无头服务-headless-services","children":[{"level":3,"title":"Headless Service 的特点","slug":"headless-service-的特点","link":"#headless-service-的特点","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-3","link":"#使用场景-3","children":[]},{"level":3,"title":"Headless Service 的定义示例","slug":"headless-service-的定义示例","link":"#headless-service-的定义示例","children":[]},{"level":3,"title":"StatefulSet 与 Headless Service 的结合","slug":"statefulset-与-headless-service-的结合","link":"#statefulset-与-headless-service-的结合","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"Kubelet的hairpin-mode","slug":"kubelet的hairpin-mode","link":"#kubelet的hairpin-mode","children":[{"level":3,"title":"Hairpin Mode 的工作原理","slug":"hairpin-mode-的工作原理","link":"#hairpin-mode-的工作原理","children":[]},{"level":3,"title":"配置 hairpin-mode","slug":"配置-hairpin-mode","link":"#配置-hairpin-mode","children":[]},{"level":3,"title":"配置示例","slug":"配置示例-2","link":"#配置示例-2","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-4","link":"#使用场景-4","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"资源短缺","slug":"资源短缺","link":"#资源短缺","children":[]},{"level":2,"title":"如何能够让 Kubernetes 的调度器尽可能地将 Pod 分布在不同机器上，避免“堆叠”呢?","slug":"如何能够让-kubernetes-的调度器尽可能地将-pod-分布在不同机器上-避免-堆叠-呢","link":"#如何能够让-kubernetes-的调度器尽可能地将-pod-分布在不同机器上-避免-堆叠-呢","children":[{"level":3,"title":"1. Pod 反亲和性（Pod Anti-Affinity）","slug":"_1-pod-反亲和性-pod-anti-affinity","link":"#_1-pod-反亲和性-pod-anti-affinity","children":[]},{"level":3,"title":"2. 节点亲和性（Node Affinity）","slug":"_2-节点亲和性-node-affinity","link":"#_2-节点亲和性-node-affinity","children":[]},{"level":3,"title":"3. 分布式调度策略（Spread Constraints）","slug":"_3-分布式调度策略-spread-constraints","link":"#_3-分布式调度策略-spread-constraints","children":[]},{"level":3,"title":"4. 自定义调度器策略（Custom Scheduler Policies）","slug":"_4-自定义调度器策略-custom-scheduler-policies","link":"#_4-自定义调度器策略-custom-scheduler-policies","children":[]}]},{"level":2,"title":"kubelet如何实现 exec、logs 等接口","slug":"kubelet如何实现-exec、logs-等接口","link":"#kubelet如何实现-exec、logs-等接口","children":[]},{"level":2,"title":"集群安装","slug":"集群安装","link":"#集群安装","children":[]}],"git":{"createdTime":1719990112000,"updatedTime":1723512197000,"contributors":[{"name":"mousesun","email":"3026098675@qq.com","commits":15}]},"readingTime":{"minutes":19.91,"words":5973},"filePathRelative":"云原生/k8s.md","localizedDate":"2024年7月3日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">k8s 笔记总结</p>\\n</div>\\n<h1>pv</h1>\\n<h2>访问模式（Access Modes）</h2>\\n<p>Kubernetes支持的访问模式如下。</p>\\n<ul>\\n<li>\\n<p>ReadWriteOnce（RWO）：读写权限，并且只能被单个Node挂\\n载。</p>\\n</li>\\n<li>\\n<p>ReadOnlyMany（ROX）：只读权限，允许被多个Node挂载。</p>\\n</li>\\n<li>\\n<p>ReadWriteMany（RWX）：读写权限，允许被多个Node挂载。</p>\\n</li>\\n</ul>","autoDesc":true}');export{o as comp,g as data};
