import{_ as s,c as i,o as a,a as n}from"./app-RLHoosda.js";const e={},l=n(`<div class="hint-container tip"><p class="hint-container-title">linux用户密码生成</p></div><h3 id="如何为-linux-用户设置密码-基于-openssl-passwd-6-的实现" tabindex="-1"><a class="header-anchor" href="#如何为-linux-用户设置密码-基于-openssl-passwd-6-的实现"><span>如何为 Linux 用户设置密码：基于 OpenSSL <code>passwd -6</code> 的实现</span></a></h3><p>在 Linux 系统中，用户管理是系统安全和运维管理的关键组成部分。创建用户时，除了分配一个唯一的用户名，我们通常还需要为该用户设置一个强密码。在 Linux 中，可以使用 <code>useradd</code> 命令来创建新用户并为其设置密码。本文将介绍如何基于 OpenSSL <code>passwd -6</code> 方法实现用户密码生成与设置，并提供一个基于 Go 语言的实现方案，模拟 OpenSSL 的 <code>passwd -6</code> 来生成和存储安全的 SHA-512 密码哈希。</p><h2 id="背景知识" tabindex="-1"><a class="header-anchor" href="#背景知识"><span>背景知识</span></a></h2><p>在 Linux 系统中，用户的密码是通过加密存储的。通常，Linux 使用不同的密码哈希算法来加密密码，如 MD5、SHA-256、SHA-512 等。<code>passwd -6</code> 使用 <strong>SHA-512</strong> 哈希算法，并结合 <strong>salt（盐值）</strong> 来增强密码的安全性。</p><h3 id="openssl-passwd-6-命令" tabindex="-1"><a class="header-anchor" href="#openssl-passwd-6-命令"><span>OpenSSL <code>passwd -6</code> 命令</span></a></h3><p><code>passwd -6</code> 命令是 OpenSSL 提供的一个工具，用于生成 SHA-512 哈希密码。其具体实现是通过将密码与一个随机生成的盐值（salt）结合，然后经过多次迭代，生成最终的哈希值。这个哈希值包含了以下几个部分：</p><ul><li><strong>哈希类型标识符</strong>：例如 <code>$6$</code>，表示使用 SHA-512 算法。</li><li><strong>盐值（Salt）</strong>：随机生成的字符串，用于加密密码的过程。</li><li><strong>密码哈希</strong>：加密后的密码，使用 SHA-512 算法多次迭代处理。</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$6</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$VcTPTzMyZwkLEflQ$AxG3kvH5cCmhgkYK6RL9KtI1l7QaYsWK3b4JOIDdM1dRmLcpK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/FrquxiYwIZjELeAT6pS8YEhcfBu9b7QRNHB/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该密码哈希中：</p><ul><li><code>$6$</code> 表示使用 SHA-512 算法。</li><li><code>VcTPTzMyZwkLEflQ</code> 是盐值（通过 Base64 编码）。</li><li><code>AxG3kvH5...</code> 是密码的哈希部分。</li></ul><h2 id="用户密码生成设置方案" tabindex="-1"><a class="header-anchor" href="#用户密码生成设置方案"><span>用户密码生成设置方案</span></a></h2><h3 id="_1-使用-go-语言模拟-openssl-passwd-6-生成密码哈希" tabindex="-1"><a class="header-anchor" href="#_1-使用-go-语言模拟-openssl-passwd-6-生成密码哈希"><span>1. 使用 Go 语言模拟 OpenSSL <code>passwd -6</code> 生成密码哈希</span></a></h3><p>为了实现 Linux 系统中用户密码的生成和验证，我们可以通过 Go 语言模拟 <code>openssl passwd -6</code> 的功能。下面是一个 Go 语言实现，展示如何生成密码哈希并设置密码。</p><h4 id="生成盐值" tabindex="-1"><a class="header-anchor" href="#生成盐值"><span>生成盐值</span></a></h4><p>盐值是为了增加密码哈希的不可预测性，防止通过彩虹表攻击破解密码。我们可以使用随机生成的盐值来模拟 OpenSSL 中的盐值生成。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 生成一个随机盐值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NisService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">generateSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// Generate a random string for use in the salt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	seededRand</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NewSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">UnixNano</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	salt</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> salt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		salt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">seededRand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Intn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">charset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> salt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们定义了一个生成盐值的方法。该方法会随机选择字符生成一个 8 字节（64 位）长的盐值。</p><h4 id="生成密码哈希" tabindex="-1"><a class="header-anchor" href="#生成密码哈希"><span>生成密码哈希</span></a></h4><p>接下来，我们使用 <code>SHA-512</code> 算法对密码进行哈希处理，并与生成的盐值一起存储。此过程类似于 <code>passwd -6</code> 命令的工作原理。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 	&quot;github.com/tredoe/osutil/user/crypt/sha512_crypt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// SHA-512 哈希加密过程，模拟 OpenSSL passwd -6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NisService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">generateSHA512Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 将盐值与加密算法标识符组合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	salt</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;$6$</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">generateSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 使用 salt 和密码生成哈希</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	c</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sha512_crypt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Generate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">salt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Errorf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;error hashing user&#39;s supplied password: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">errors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ErrFailGenerateHash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个实现中：</p><ol><li><strong>盐值生成</strong>：我们通过 <code>generateSalt</code> 方法生成盐值，并将其与 <code>$6$</code> （表示 SHA-512）组合形成最终的盐值。</li><li><strong>哈希生成</strong>：使用 <code>sha512_crypt.New()</code> 创建一个新的 SHA-512 加密实例，并将密码和盐值传递给 <code>Generate</code> 方法来生成密码哈希。</li></ol><h3 id="_2-在-linux-系统中为新用户设置密码" tabindex="-1"><a class="header-anchor" href="#_2-在-linux-系统中为新用户设置密码"><span>2. 在 Linux 系统中为新用户设置密码</span></a></h3><p>现在，我们可以使用 <code>useradd</code> 命令来创建一个新用户，并为其设置通过 <code>generateSHA512Hash</code> 生成的哈希密码。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 创建新用户 user7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> useradd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user7</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 为用户 user7 设置密码（哈希值替代实际密码）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --password</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;$6$VcTPTzMyZwkLEflQ$AxG3kvH5cCmhgkYK6RL9KtI1l7QaYsWK3b4JOIDdM1dRmLcpK/FrquxiYwIZjELeAT6pS8YEhcfBu9b7QRNHB/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此命令中：</p><ul><li><code>useradd</code> 用于创建新用户。</li><li><code>usermod --password</code> 命令设置密码，直接使用生成的密码哈希。</li></ul><h3 id="_3-密码验证" tabindex="-1"><a class="header-anchor" href="#_3-密码验证"><span>3. 密码验证</span></a></h3><p>当用户尝试登录时，系统会将他们输入的密码与存储的哈希进行对比。Linux 系统会自动处理这一过程，使用相同的盐值和哈希算法对输入的密码进行加密并验证是否匹配。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在 Linux 系统中，用户密码的设置和存储非常重要，使用合适的哈希算法和盐值可以极大地提高系统的安全性。通过 <code>passwd -6</code>，你可以使用 SHA-512 算法对密码进行加密，并结合随机生成的盐值增强密码的安全性。</p><p>本文通过 Go 语言实现了一个模拟 <code>openssl passwd -6</code> 的方案，通过生成盐值并使用 SHA-512 算法加密密码。你可以根据这个方案在实际的系统中为用户生成安全的密码，并结合 <code>useradd</code> 和 <code>usermod</code> 命令进行用户密码的设置。</p>`,34),t=[l];function h(p,k){return a(),i("div",null,t)}const r=s(e,[["render",h],["__file","linux用户密码生成.html.vue"]]),o=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/linux%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90.html","title":"linux用户密码生成","lang":"zh-CN","frontmatter":{"date":"2024-12-27T00:00:00.000Z","title":"linux用户密码生成","category":["linux"],"tag":["用户密码"],"description":"linux用户密码生成 如何为 Linux 用户设置密码：基于 OpenSSL passwd -6 的实现 在 Linux 系统中，用户管理是系统安全和运维管理的关键组成部分。创建用户时，除了分配一个唯一的用户名，我们通常还需要为该用户设置一个强密码。在 Linux 中，可以使用 useradd 命令来创建新用户并为其设置密码。本文将介绍如何基于 Op...","head":[["meta",{"property":"og:url","content":"https://mousesun846.github.io/KnowledgeBlog/KnowledgeBlog/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/linux%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90.html"}],["meta",{"property":"og:site_name","content":"知识笔记"}],["meta",{"property":"og:title","content":"linux用户密码生成"}],["meta",{"property":"og:description","content":"linux用户密码生成 如何为 Linux 用户设置密码：基于 OpenSSL passwd -6 的实现 在 Linux 系统中，用户管理是系统安全和运维管理的关键组成部分。创建用户时，除了分配一个唯一的用户名，我们通常还需要为该用户设置一个强密码。在 Linux 中，可以使用 useradd 命令来创建新用户并为其设置密码。本文将介绍如何基于 Op..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-27T03:18:18.000Z"}],["meta",{"property":"article:author","content":"MouseSun"}],["meta",{"property":"article:tag","content":"用户密码"}],["meta",{"property":"article:published_time","content":"2024-12-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-27T03:18:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"linux用户密码生成\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-27T03:18:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MouseSun\\",\\"url\\":\\"https://github.com/MouseSun846\\",\\"email\\":\\"\\"}]}"]]},"headers":[{"level":3,"title":"如何为 Linux 用户设置密码：基于 OpenSSL passwd -6 的实现","slug":"如何为-linux-用户设置密码-基于-openssl-passwd-6-的实现","link":"#如何为-linux-用户设置密码-基于-openssl-passwd-6-的实现","children":[]},{"level":2,"title":"背景知识","slug":"背景知识","link":"#背景知识","children":[{"level":3,"title":"OpenSSL passwd -6 命令","slug":"openssl-passwd-6-命令","link":"#openssl-passwd-6-命令","children":[]}]},{"level":2,"title":"用户密码生成设置方案","slug":"用户密码生成设置方案","link":"#用户密码生成设置方案","children":[{"level":3,"title":"1. 使用 Go 语言模拟 OpenSSL passwd -6 生成密码哈希","slug":"_1-使用-go-语言模拟-openssl-passwd-6-生成密码哈希","link":"#_1-使用-go-语言模拟-openssl-passwd-6-生成密码哈希","children":[]},{"level":3,"title":"2. 在 Linux 系统中为新用户设置密码","slug":"_2-在-linux-系统中为新用户设置密码","link":"#_2-在-linux-系统中为新用户设置密码","children":[]},{"level":3,"title":"3. 密码验证","slug":"_3-密码验证","link":"#_3-密码验证","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1735269498000,"updatedTime":1735269498000,"contributors":[{"name":"mousesun","email":"3026098675@qq.com","commits":1}]},"readingTime":{"minutes":4.16,"words":1247},"filePathRelative":"技术科普/linux用户密码生成.md","localizedDate":"2024年12月27日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">linux用户密码生成</p>\\n</div>\\n<h3>如何为 Linux 用户设置密码：基于 OpenSSL <code>passwd -6</code> 的实现</h3>\\n<p>在 Linux 系统中，用户管理是系统安全和运维管理的关键组成部分。创建用户时，除了分配一个唯一的用户名，我们通常还需要为该用户设置一个强密码。在 Linux 中，可以使用 <code>useradd</code> 命令来创建新用户并为其设置密码。本文将介绍如何基于 OpenSSL <code>passwd -6</code> 方法实现用户密码生成与设置，并提供一个基于 Go 语言的实现方案，模拟 OpenSSL 的 <code>passwd -6</code> 来生成和存储安全的 SHA-512 密码哈希。</p>","autoDesc":true}');export{r as comp,o as data};
